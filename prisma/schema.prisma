// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store{
  id                 String @id @default(uuid())
  name               String
  userId             String
  createAt           DateTime @default(now())
  updatedAt          DateTime @updatedAt
  bilboards          Billboard[] @relation("StoreToBillboard")
  categories         Category[] @relation("StoreToCategory")
  colors             Color[] @relation("StoreToColor")
  sizes              Size[] @relation("StoreToSize")
  products           Product[] @relation("StoreToProduct")
  orders           Order[] @relation("StoreToOrder")

  

}

model Billboard{
 id                 String @id @default(uuid())
 storeId            String
 store              Store @relation("StoreToBillboard", fields: [storeId], references: [id])
 label              String
 imageUrl           String
 createAt           DateTime @default(now())
 updatedAt          DateTime @updatedAt
 categories         Category[]


 @@index([storeId])

}

model Category{
   id                 String @id @default(uuid())
   storeId            String
   store              Store @relation("StoreToCategory", fields: [storeId], references: [id])
   billboardId        String
   billboard          Billboard @relation(fields: [billboardId], references: [id])
   name               String
   createAt           DateTime @default(now())
   updatedAt          DateTime @updatedAt
   products           Product[] @relation("CategoryToProduct")

   @@index([storeId])
   @@index([billboardId])
}

model Color{
   id                 String @id @default(uuid())
   storeId            String
   store              Store @relation("StoreToColor", fields: [storeId], references: [id])
   name               String
   value              String
   createAt           DateTime @default(now())
   updatedAt          DateTime @updatedAt
   products           Product[]

   @@index([storeId])
}

model Size{
   id                 String @id @default(uuid())
   storeId            String
   store              Store @relation("StoreToSize", fields: [storeId], references: [id])
   name               String
   value              String
   products           Product[]
   createAt           DateTime @default(now())
   updatedAt          DateTime @updatedAt

   @@index([storeId])
}

model Product{
   id                 String @id @default(uuid())
   storeId            String
   store              Store @relation("StoreToProduct", fields: [storeId], references: [id])
   categoryId         String
   category           Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
   name               String
   price              Decimal
   isFeatured         Boolean @default(false)
   isArchived         Boolean @default(false)
   sizeId             String
   size               Size @relation( fields: [sizeId], references: [id])
   colorId            String
   color              Color @relation(fields: [colorId], references: [id])
   images             Image[]
   createAt           DateTime @default(now())
   updatedAt          DateTime @updatedAt
   orderItems         OrderItem[]

   @@index([storeId])
   @@index([categoryId])
   @@index([sizeId])
   @@index([colorId])


}

model Image{
   id                 String @id @default(uuid())
   productId          String
   product            Product  @relation( fields: [productId], references: [id], onDelete: Cascade)
   url                String
   createAt           DateTime @default(now())
   updatedAt          DateTime @updatedAt

   @@index([productId])
}

model Order {
  id        String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
